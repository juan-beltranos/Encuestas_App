[{"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\index.js":"1","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\reportWebVitals.js":"2","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\App.js":"3","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\hooks\\useCurrentUserInfo.js":"4","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\ScrollToTop\\index.js":"5","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\styles\\GoblaStyle.js":"6","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\SurveyPage\\index.js":"7","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Available\\index.js":"8","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Splash\\index.js":"9","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Saved\\index.js":"10","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Home\\index.js":"11","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\AboutUs\\index.js":"12","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Contact\\index.js":"13","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\services\\RestService.js":"14","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\styles\\GenericStyles.js":"15","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\AboutUs\\styles.js":"16","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\SurveyPage\\styles.js":"17","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Home\\styles.js":"18","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Contact\\styles.js":"19","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\constants.js":"20","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\LoaderComp\\index.js":"21","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\NavBar\\index.js":"22","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\SurveyCard\\index.js":"23","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\NavBar\\styles.js":"24","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\SurveyCard\\styles.js":"25","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\hooks\\useInitialRegion.js":"26"},{"size":478,"mtime":1608522649697,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":1458,"mtime":1615302600384,"results":"30","hashOfConfig":"28"},{"size":1502,"mtime":1615298915636,"results":"31","hashOfConfig":"28"},{"size":349,"mtime":1611597722862,"results":"32","hashOfConfig":"28"},{"size":332,"mtime":1611598295925,"results":"33","hashOfConfig":"28"},{"size":7513,"mtime":1615307384028,"results":"34","hashOfConfig":"28"},{"size":5610,"mtime":1615304893920,"results":"35","hashOfConfig":"28"},{"size":581,"mtime":1613064340869,"results":"36","hashOfConfig":"28"},{"size":2661,"mtime":1613070559401,"results":"37","hashOfConfig":"28"},{"size":1831,"mtime":1615300189053,"results":"38","hashOfConfig":"28"},{"size":2829,"mtime":1614900220636,"results":"39","hashOfConfig":"28"},{"size":3064,"mtime":1614900285040,"results":"40","hashOfConfig":"28"},{"size":1054,"mtime":1611585009927,"results":"41","hashOfConfig":"28"},{"size":739,"mtime":1613065328025,"results":"42","hashOfConfig":"28"},{"size":214,"mtime":1608578825987,"results":"43","hashOfConfig":"28"},{"size":824,"mtime":1613065611556,"results":"44","hashOfConfig":"28"},{"size":1242,"mtime":1610492154024,"results":"45","hashOfConfig":"28"},{"size":1349,"mtime":1611682082874,"results":"46","hashOfConfig":"28"},{"size":280,"mtime":1614815440962,"results":"47","hashOfConfig":"28"},{"size":458,"mtime":1611594249000,"results":"48","hashOfConfig":"28"},{"size":1242,"mtime":1610492154021,"results":"49","hashOfConfig":"28"},{"size":864,"mtime":1615305953466,"results":"50","hashOfConfig":"28"},{"size":1429,"mtime":1611593268572,"results":"51","hashOfConfig":"28"},{"size":1129,"mtime":1615305974086,"results":"52","hashOfConfig":"28"},{"size":1209,"mtime":1615305234573,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1jc1cy9",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"56"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\index.js",[],["115","116"],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\reportWebVitals.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\App.js",["117"],"import React, { useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport { GlobalStyle } from \"./styles/GoblaStyle\";\r\n// pages\r\nimport { Splash } from \"./pages/Splash\";\r\nimport { Home } from \"./pages/Home\";\r\nimport { Available } from \"./pages/Available\";\r\nimport { Saved } from \"./pages/Saved\";\r\nimport { Contact } from \"./pages/Contact\";\r\nimport { AboutUs } from \"./pages/AboutUs\";\r\nimport { SurveyPage } from \"./pages/SurveyPage\";\r\n// components\r\nimport ScrollToTop from \"./components/ScrollToTop/index\";\r\n// hooks\r\nimport useCurrentUserInfo from \"./hooks/useCurrentUserInfo\";\r\nimport useInitialRegion from \"./hooks/useInitialRegion\";\r\n\r\nfunction App() {\r\n  const [getInitialData] = useCurrentUserInfo();\r\n  const [getRegion] = useInitialRegion();\r\n\r\n  useEffect(() => {\r\n    getInitialData();\r\n    getRegion();\r\n  }, []);\r\n\r\n  return (\r\n    <Router>\r\n      <GlobalStyle />\r\n      <ScrollToTop />\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Splash} />\r\n        <Route exact path=\"/home\" component={Home} />\r\n        <Route exact path=\"/available\" component={Available} />\r\n        <Route exact path=\"/saved\" component={Saved} />\r\n        <Route exact path=\"/contact\" component={Contact} />\r\n        <Route exact path=\"/aboutus\" component={AboutUs} />\r\n        <Route exact path=\"/survey/:surveyId\" component={SurveyPage} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\hooks\\useCurrentUserInfo.js",["118"],"// rest\r\nimport { getCountryData } from \"../services/RestService\";\r\n// database\r\nimport { useStorageSQLite } from \"react-data-storage-sqlite-hook/dist\";\r\nimport { Plugins } from \"@capacitor/core\";\r\n// npm\r\nimport swal from \"sweetalert\";\r\n\r\nfunction useCurrentUserInfo() {\r\n  const { Geolocation, Device, Network } = Plugins;\r\n  const { openStore, setItem, clear } = useStorageSQLite();\r\n\r\n  const getCountry = async (lat, lng) => {\r\n    const data = await getCountryData(lat, lng);\r\n    return data;\r\n  };\r\n\r\n  const getInitialData = async () => {\r\n    // await clear()\r\n    const status = await Network.getStatus();\r\n    if (status.connected) {\r\n      const info = await Device.getInfo();\r\n      let countryData;\r\n      await Geolocation.getCurrentPosition()\r\n        .then(async (GeolocationPosition) => {\r\n          countryData = await getCountry(\r\n            GeolocationPosition.coords.latitude,\r\n            GeolocationPosition.coords.longitude\r\n          );\r\n          const resOpen = await openStore({});\r\n          if (resOpen) {\r\n            const userInfo = {\r\n              uuid: !info.uuid ? \"No permitido\" : info.uuid,\r\n              location: countryData.data.results[0].formatted_address,\r\n            };\r\n            console.log(userInfo);\r\n            await setItem(\"userInfo\", JSON.stringify(userInfo));\r\n          }\r\n        })\r\n        .catch((err) => swal(\"Por favor activa la localización\"));\r\n    }\r\n  };\r\n\r\n  return [getInitialData];\r\n}\r\n\r\nexport default useCurrentUserInfo;\r\n","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\ScrollToTop\\index.js",["119"],"import { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nfunction ScrollToTop({ history }) {\r\n  useEffect(() => {\r\n    const unlisten = history.listen(() => {\r\n      window.scrollTo(0, 0);\r\n    });\r\n    return () => {\r\n      unlisten();\r\n    }\r\n  }, []);\r\n\r\n  return (null);\r\n}\r\n\r\nexport default withRouter(ScrollToTop);","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\styles\\GoblaStyle.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\SurveyPage\\index.js",["120","121"],"import React, { Fragment, useState, useEffect } from \"react\";\r\n// styles\r\nimport {\r\n  PageContainer,\r\n  SurveysContainer,\r\n  PageTitleContainer,\r\n} from \"../../styles/GenericStyles\";\r\nimport { Container, Title, StepsContainer } from \"./styles\";\r\n// components\r\nimport { NavBar } from \"../../components/NavBar\";\r\nimport { LoaderComp } from \"../../components/LoaderComp\";\r\n// npm\r\nimport * as Survey from \"survey-react\";\r\nimport \"survey-react/survey.css\";\r\nimport swal from \"sweetalert\";\r\nimport { useHistory } from \"react-router-dom\";\r\n// rest\r\nimport { SaveResult } from \"../../services/RestService\";\r\n// database\r\nimport { useStorageSQLite } from \"react-data-storage-sqlite-hook/dist\";\r\nimport { Plugins } from \"@capacitor/core\";\r\n// hooks\r\nimport useCurrentUserInfo from \"../../hooks/useCurrentUserInfo\";\r\n\r\nimport \"./customCss.css\";\r\n\r\n// buttons\r\nSurvey.defaultStandardCss.progressButtonsListElementCurrent =\r\n  \"sv_progress-buttons__list-element--current current-button\";\r\nSurvey.defaultStandardCss.progressButtonsPageTitle = \"title\";\r\nSurvey.defaultStandardCss.progressButtonsList =\r\n  \"sv_progress-buttons__list dots\";\r\nSurvey.defaultStandardCss.progressButtonsImageButtonLeft =\r\n  \"sv_progress-buttons__image-button-left left-arrow\";\r\nSurvey.defaultStandardCss.progressButtonsImageButtonRight =\r\n  \"sv_progress-buttons__image-button-right right-arrow\";\r\n// Progress bar\r\nSurvey.defaultStandardCss.progress = \"sv_progress progress\";\r\n// page\r\nSurvey.defaultStandardCss.page.title = \"sv_page_title page-title\";\r\nSurvey.defaultStandardCss.body = \"sv_body container\";\r\nSurvey.defaultStandardCss.footer = \"sv_nav nav\";\r\nSurvey.defaultStandardCss.page.root = \"sv_p_root root\";\r\nSurvey.defaultStandardCss.progressButtonsListElementPassed =\r\n  \"sv_progress-buttons__list-element--passed passed\";\r\nSurvey.defaultStandardCss.progressButtonsContainerCenter =\r\n  \"sv_progress-buttons__container-center buttons-container\";\r\nSurvey.defaultStandardCss.completedPage = \"sv_completed_page completed\";\r\n\r\nexport const SurveyPage = ({ match, history }) => {\r\n  const { openStore, getItem, setItem } = useStorageSQLite();\r\n  const {\r\n    params: { surveyId },\r\n  } = match;\r\n  const { Network } = Plugins;\r\n  let historyRouter = useHistory();\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [finalData, setFinalData] = useState({});\r\n  const [getInitialData] = useCurrentUserInfo();\r\n\r\n  const model = new Survey.Model(finalData.json);\r\n  model.data = finalData.values;\r\n\r\n  const saveData = async (data) => {\r\n    const savedSurvey = {\r\n      ...finalData,\r\n      isSaved: true,\r\n      values: data,\r\n    };\r\n    const resOpen = await openStore({});\r\n    if (resOpen) {\r\n      await setItem(surveyId, JSON.stringify(savedSurvey));\r\n    }\r\n  };\r\n\r\n  var onValueChanged = async function (sender, options) {\r\n    console.log(sender.data);\r\n    await saveData(sender.data);\r\n  };\r\n\r\n  const onComplete = async (result) => {\r\n    const resOpen = await openStore({});\r\n    const status = await Network.getStatus();\r\n    if (status.connected) {\r\n      let userInfo = { uuid: \"default\", location: \"default\" };\r\n      if (resOpen) {\r\n        userInfo = await getItem(\"userInfo\");\r\n      }\r\n      console.log(result.data);\r\n      const parsedInfo = JSON.parse(userInfo);\r\n      if (parsedInfo) {\r\n        try {\r\n          const data = JSON.stringify({\r\n            ...result.data,\r\n            uuid: parsedInfo.uuid,\r\n            location: parsedInfo.location,\r\n          });\r\n          console.log(data);\r\n          const bodyFormData = new FormData();\r\n          bodyFormData.append(\"SurveyId\", surveyId);\r\n          bodyFormData.append(\"Json\", data);\r\n          await SaveResult(bodyFormData);\r\n          const completedSurvey = {\r\n            ...finalData,\r\n            values: data,\r\n            isSaved: true,\r\n            isCompleted: true,\r\n          };\r\n          if (resOpen) {\r\n            await setItem(surveyId, JSON.stringify(completedSurvey));\r\n          }\r\n          swal(\r\n            \"Envío de encuesta\",\r\n            \"Encuesta enviada correctamente\",\r\n            \"success\"\r\n          );\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      } else {\r\n        historyRouter.push(\"/saved\");\r\n        swal(\"Por favor activa la localización antes de enviar la encuesta\");\r\n      }\r\n    } else {\r\n      historyRouter.push(\"/saved\");\r\n      swal(\r\n        \"Sin conexión. Intenta enviar el formulario cuando tengas acceso a la red.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  const findSurvey = async () => {\r\n    const resOpen = await openStore({});\r\n    if (resOpen) {\r\n      const obj = await getItem(surveyId);\r\n      setFinalData(JSON.parse(obj));\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const onCurrentPageChanged = () => {\r\n    // setCurrentPage(model.currentPageNo)\r\n    window.scrollTo(0, 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (finalData.isCompleted) {\r\n      swal(\"Envío de encuesta\", \"Encuesta enviada correctamente\", \"success\");\r\n    }\r\n    console.log(finalData);\r\n\r\n    getInitialData()\r\n      .then(() => {\r\n        return findSurvey();\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (finalData.isCompleted) {\r\n      swal(\r\n        \"Encuesta completada previamente\",\r\n        \"¿Está seguro de querer llenar la encuesta de nuevo?\",\r\n        {\r\n          buttons: {\r\n            cancel: \"Cancelar\",\r\n            catch: {\r\n              text: \"Seguir\",\r\n              value: \"catch\",\r\n            },\r\n          },\r\n        }\r\n      ).then((value) => {\r\n        switch (value) {\r\n          case \"catch\":\r\n            break;\r\n\r\n          default:\r\n            historyRouter.push(\"/saved\");\r\n        }\r\n      });\r\n    }\r\n    console.log(finalData);\r\n  }, [finalData]);\r\n\r\n  const defaultImg = \"/assets/images/default-survey.png\";\r\n  const defaultPlace = \"Default place\";\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageContainer>\r\n        {isLoading ? (\r\n          <LoaderComp color=\"white\" />\r\n        ) : (\r\n          <Fragment>\r\n            <PageTitleContainer>\r\n              <Container>\r\n                <Title>\r\n                  <img\r\n                    src={\r\n                      finalData.json.logo\r\n                        ? finalData.json.logo.es\r\n                          ? finalData.json.logo.es\r\n                          : finalData.json.logo\r\n                        : defaultImg\r\n                    }\r\n                    alt=\"imágen de formulario\"\r\n                  />\r\n                  <div>\r\n                    <h2>{finalData.name}</h2>\r\n                    <h2>\r\n                      {finalData.json.Ubicación\r\n                        ? finalData.json.Ubicación\r\n                        : defaultPlace}\r\n                    </h2>\r\n                  </div>\r\n                </Title>\r\n                <StepsContainer>\r\n                  {/* <SurveyNav\r\n                    pages={finalData.json.pages}\r\n                    pageNumber={currentPage}\r\n                  /> */}\r\n                </StepsContainer>\r\n              </Container>\r\n            </PageTitleContainer>\r\n            <SurveysContainer isSurvey={true} color=\"#F4F4F4\">\r\n              <Survey.Survey\r\n                model={model}\r\n                onComplete={onComplete}\r\n                onValueChanged={onValueChanged}\r\n                onCurrentPageChanged={onCurrentPageChanged}\r\n              />\r\n            </SurveysContainer>\r\n          </Fragment>\r\n        )}\r\n      </PageContainer>\r\n      <NavBar />\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Available\\index.js",["122"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  PageContainer,\r\n  SurveysContainer,\r\n  PageTitleContainer,\r\n} from \"../../styles/GenericStyles\";\r\n// components\r\nimport { SurveyCard } from \"../../components/SurveyCard\";\r\nimport { NavBar } from \"../../components/NavBar\";\r\nimport { LoaderComp } from \"../../components/LoaderComp\";\r\n// rest\r\nimport { getSurveys } from \"../../services/RestService\";\r\n// capacitor\r\nimport { useStorageSQLite } from \"react-data-storage-sqlite-hook/dist\";\r\nimport { Plugins } from \"@capacitor/core\";\r\n// npm\r\nimport swal from \"sweetalert\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nexport const CompletedTitle = styled.p`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: gray;\r\n  font-size: 16px;\r\n  text-align: center;\r\n  & img {\r\n    margin-top: 30px;\r\n    max-width: 200px;\r\n  }\r\n`;\r\n\r\nexport const Available = () => {\r\n  const { Network } = Plugins;\r\n  const {\r\n    openStore,\r\n    setItem,\r\n    isKey,\r\n    getAllValues,\r\n    getAllKeys,\r\n    getItem,\r\n    removeItem,\r\n  } = useStorageSQLite();\r\n  const [allSurveys, setAllSurveys] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const getAllSurveys = async () => {\r\n    setIsLoading(true);\r\n    const status = await Network.getStatus();\r\n    const resOpen = await openStore({});\r\n    if (status.connected) {\r\n      const response = await getSurveys();\r\n      console.log(response);\r\n      const res = response.data;\r\n      if (resOpen) {\r\n        const localSurveys = await getAllKeys();\r\n        localSurveys.map(async (key) => {\r\n          if (!isNaN(key)) {\r\n            if (!res.some((e) => e.id === key)) {\r\n              await removeItem(key);\r\n            }\r\n          }\r\n          return null;\r\n        });\r\n        res.map(async (survey) => {\r\n          const json = survey.json.replace(/\\\\/g, \"\");\r\n          const obj = {\r\n            ...survey,\r\n            json: JSON.parse(json),\r\n          };\r\n          const isOnDatabase = await isKey(survey.id);\r\n          if (isOnDatabase) {\r\n            const objectInDatabase = await getItem(survey.id);\r\n            const parsedObject = JSON.parse(objectInDatabase);\r\n            if (\r\n              JSON.stringify(obj.json) !== JSON.stringify(parsedObject.json) ||\r\n              obj.name !== parsedObject.name\r\n            ) {\r\n              console.log(`${survey.id} saved in local database`);\r\n              await setItem(survey.id, JSON.stringify(obj));\r\n            }\r\n          } else {\r\n            console.log(`Survey with ID: ${survey.id} saved in local database`);\r\n            await setItem(survey.id, JSON.stringify(obj));\r\n            // improve this line\r\n            const parsedSurveys = await getAllValues();\r\n            setAllSurveys(parsedSurveys);\r\n          }\r\n        });\r\n        const parsedSurveys = await getAllValues();\r\n        await setAllSurveys(parsedSurveys);\r\n      }\r\n    } else {\r\n      if (resOpen) {\r\n        const surveys = await getAllValues();\r\n        setAllSurveys(surveys);\r\n      }\r\n      swal(\r\n        \"Sin conexión. Se mostrarán las encuestas que hayas descargado previamente\"\r\n      );\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return getAllSurveys();\r\n  }, []);\r\n\r\n  let availableSurveysNumber = 0;\r\n  const region = localStorage.getItem(\"userRegion\");\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageContainer>\r\n        <PageTitleContainer>\r\n          <img\r\n            src=\"/assets/logos/disponibles-logo-white.svg\"\r\n            alt=\"logo encuestas disponibles\"\r\n          />\r\n          <h1>Encuestas Disponibles</h1>\r\n        </PageTitleContainer>\r\n        <SurveysContainer>\r\n          {isLoading ? (\r\n            <LoaderComp />\r\n          ) : allSurveys.length === 0 ? (\r\n            <p>No hay formularios para completar en este momento.</p>\r\n          ) : (\r\n            <Fragment>\r\n              {allSurveys.map((survey) => {\r\n                const parsedSurvey = JSON.parse(survey);\r\n                // validate if a survey is in display mode\r\n                if (region === \"Colombia\") {\r\n                  if (!parsedSurvey.uuid) {\r\n                    if (\r\n                      parsedSurvey.json.Publicado &&\r\n                      !parsedSurvey.isCompleted &&\r\n                      !parsedSurvey.json.Ubicación\r\n                    ) {\r\n                      availableSurveysNumber++;\r\n                      return (\r\n                        <SurveyCard key={parsedSurvey.id} {...parsedSurvey} />\r\n                      );\r\n                    }\r\n                  }\r\n                } else {\r\n                  if (!parsedSurvey.uuid) {\r\n                    if (\r\n                      parsedSurvey.json.Publicado &&\r\n                      !parsedSurvey.isCompleted &&\r\n                      parsedSurvey.json.Ubicación === region\r\n                    ) {\r\n                      availableSurveysNumber++;\r\n                      return (\r\n                        <SurveyCard key={parsedSurvey.id} {...parsedSurvey} />\r\n                      );\r\n                    }\r\n                  }\r\n                }\r\n                return null;\r\n              })}\r\n              {availableSurveysNumber === 0 && (\r\n                <CompletedTitle>\r\n                  No hay encuestas para completar en este momento\r\n                  <img src=\"assets/logos/empty.gif\" alt=\"logo\" />\r\n                </CompletedTitle>\r\n              )}\r\n            </Fragment>\r\n          )}\r\n        </SurveysContainer>\r\n      </PageContainer>\r\n      <NavBar />\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Splash\\index.js",["123"],"import React, { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  background-color: #59a1d8;\r\n  & img {\r\n    width: 100vw;\r\n    height: 100vh;\r\n    object-fit: cover;\r\n  }\r\n`;\r\n\r\nexport const Splash = () => {\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    setTimeout(function () {\r\n      history.push(\"/home\");\r\n    }, 2000);\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      <img src=\"/assets/images/splash-raw.png\" alt=\"splash\" />\r\n    </Container>\r\n  );\r\n};\r\n","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Saved\\index.js",["124"],"import React, { Fragment, useEffect, useState } from \"react\";\r\nimport {\r\n  PageContainer,\r\n  SurveysContainer,\r\n  PageTitleContainer,\r\n} from \"../../styles/GenericStyles\";\r\n// components\r\nimport { SurveyCard } from \"../../components/SurveyCard\";\r\nimport { NavBar } from \"../../components/NavBar\";\r\n// database\r\nimport { useStorageSQLite } from \"react-data-storage-sqlite-hook/dist\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const CompletedTitle = styled.p`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: gray;\r\n  font-size: 16px;\r\n  text-align: center;\r\n  & img {\r\n    margin-top: 30px;\r\n    max-width: 200px;\r\n  }\r\n`;\r\n\r\nexport const Saved = () => {\r\n  const { openStore, getAllValues } = useStorageSQLite();\r\n\r\n  const [surveys, setSurveys] = useState([]);\r\n\r\n  const getSavedSurveys = async () => {\r\n    const resOpen = await openStore({});\r\n    if (resOpen) {\r\n      const data = await getAllValues();\r\n      setSurveys(data);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    return getSavedSurveys();\r\n  }, []);\r\n\r\n  let completedSurveyNumber = 0;\r\n  let currentSurveys = 0;\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageContainer>\r\n        <PageTitleContainer>\r\n          <img\r\n            src=\"/assets/logos/guardadas-logo-white.svg\"\r\n            alt=\"logo encuestas guardadas\"\r\n          />\r\n          <h1>Encuestas Guardadas</h1>\r\n        </PageTitleContainer>\r\n        <SurveysContainer>\r\n          {surveys.map((survey) => {\r\n            const data = JSON.parse(survey);\r\n            data.isCompleted && completedSurveyNumber++;\r\n            if (!data.uuid) {\r\n              if (data.isSaved && !data.isCompleted) {\r\n                currentSurveys++;\r\n                return <SurveyCard key={data.id} {...data} />;\r\n              }\r\n            }\r\n            return null;\r\n          })}\r\n          {completedSurveyNumber > 0 ? (\r\n            <CompletedTitle>Encuestas completadas</CompletedTitle>\r\n          ) : null}\r\n          {surveys.map((survey) => {\r\n            const data = JSON.parse(survey);\r\n            if (!data.uuid) {\r\n              if (data.isSaved && data.isCompleted) {\r\n                currentSurveys++;\r\n                return <SurveyCard key={data.id} {...data} />;\r\n              }\r\n            }\r\n            return null;\r\n          })}\r\n          {currentSurveys === 0 ? (\r\n            <CompletedTitle>\r\n              No tienes encuestas guardadas aún\r\n              <img src=\"assets/logos/empty.gif\" alt=\"logo\" />\r\n            </CompletedTitle>\r\n          ) : null}\r\n        </SurveysContainer>\r\n      </PageContainer>\r\n      <NavBar />\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Home\\index.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\AboutUs\\index.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Contact\\index.js",["125","126"],"import React, { Fragment, useState } from \"react\";\r\n// npm\r\nimport { useForm } from \"react-hook-form\";\r\nimport swal from \"sweetalert\";\r\n// styles\r\nimport {\r\n  PageContainer,\r\n  SurveysContainer,\r\n  PageTitleContainer,\r\n} from \"../../styles/GenericStyles\";\r\nimport {\r\n  FormContainer,\r\n  CardForm,\r\n  Input,\r\n  TextArea,\r\n  ButtonContainer,\r\n  InfoContainer,\r\n  LoaderContainer,\r\n} from \"./styles\";\r\n// components\r\nimport { NavBar } from \"../../components/NavBar\";\r\n// rest\r\nimport { SendEmail } from \"../../services/RestService\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { Plugins } from \"@capacitor/core\";\r\n\r\nexport const Contact = () => {\r\n  const { register, handleSubmit, watch, errors, reset } = useForm();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { Network } = Plugins;\r\n\r\n  const onSubmit = async (data) => {\r\n    setIsLoading(true);\r\n    const status = await Network.getStatus();\r\n    if (status.connected) {\r\n      try {\r\n        const res = await SendEmail(data);\r\n        swal(\"Enviado\", \"Mensaje enviado correctamente\", \"success\");\r\n        console.log(res);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n      reset();\r\n    } else {\r\n      swal(\r\n        \"Sin conexión. Vuelve a intentarlo cuando estés conectado a la red.\"\r\n      );\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <PageContainer>\r\n        <PageTitleContainer>\r\n          <img\r\n            src=\"/assets/logos/contacto-logo-white.svg\"\r\n            alt=\"logo encuestas guardadas\"\r\n          />\r\n          <h1>Contáctenos</h1>\r\n        </PageTitleContainer>\r\n        <SurveysContainer>\r\n          <FormContainer>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n              <CardForm>\r\n                <h4>Nombre</h4>\r\n                <Input name=\"name\" ref={register({ required: true })} />\r\n                <h4>Teléfono</h4>\r\n                <Input name=\"phone\" ref={register({ required: true })} />\r\n                <h4>Email</h4>\r\n                <Input name=\"email\" ref={register({ required: true })} />\r\n                <h4>Mensaje</h4>\r\n                <TextArea name=\"message\" ref={register({ required: true })} />\r\n              </CardForm>\r\n              <ButtonContainer>\r\n                <button type=\"submit\">\r\n                  {isLoading && (\r\n                    <LoaderContainer>\r\n                      <Loader\r\n                        type=\"Oval\"\r\n                        color=\"white\"\r\n                        height={20}\r\n                        width={20}\r\n                      />\r\n                    </LoaderContainer>\r\n                  )}\r\n                  Enviar\r\n                </button>\r\n              </ButtonContainer>\r\n            </form>\r\n            <InfoContainer>\r\n              <h5>Federación Luterana Mundial – Servicio Mundial</h5>\r\n              <p>Contáctenos: flm.colombia@lutheranworld.org</p>\r\n            </InfoContainer>\r\n          </FormContainer>\r\n        </SurveysContainer>\r\n      </PageContainer>\r\n      <NavBar />\r\n    </Fragment>\r\n  );\r\n};\r\n","D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\services\\RestService.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\styles\\GenericStyles.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\AboutUs\\styles.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\SurveyPage\\styles.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Home\\styles.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\pages\\Contact\\styles.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\constants.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\LoaderComp\\index.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\NavBar\\index.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\SurveyCard\\index.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\NavBar\\styles.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\components\\SurveyCard\\styles.js",[],"D:\\Projects\\Sosadiaz\\Huevo Frito\\React\\native-forms\\src\\hooks\\useInitialRegion.js",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":25,"column":6,"nodeType":"133","endLine":25,"endColumn":8,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":11,"column":31,"nodeType":"137","messageId":"138","endLine":11,"endColumn":36},{"ruleId":"131","severity":1,"message":"139","line":12,"column":6,"nodeType":"133","endLine":12,"endColumn":8,"suggestions":"140"},{"ruleId":"131","severity":1,"message":"141","line":158,"column":6,"nodeType":"133","endLine":158,"endColumn":8,"suggestions":"142"},{"ruleId":"131","severity":1,"message":"143","line":185,"column":6,"nodeType":"133","endLine":185,"endColumn":17,"suggestions":"144"},{"ruleId":"131","severity":1,"message":"145","line":109,"column":6,"nodeType":"133","endLine":109,"endColumn":8,"suggestions":"146"},{"ruleId":"131","severity":1,"message":"139","line":20,"column":6,"nodeType":"133","endLine":20,"endColumn":8,"suggestions":"147"},{"ruleId":"131","severity":1,"message":"148","line":43,"column":6,"nodeType":"133","endLine":43,"endColumn":8,"suggestions":"149"},{"ruleId":"135","severity":1,"message":"150","line":28,"column":35,"nodeType":"137","messageId":"138","endLine":28,"endColumn":40},{"ruleId":"135","severity":1,"message":"151","line":28,"column":42,"nodeType":"137","messageId":"138","endLine":28,"endColumn":48},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getInitialData' and 'getRegion'. Either include them or remove the dependency array.","ArrayExpression",["154"],"no-unused-vars","'clear' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["155"],"React Hook useEffect has missing dependencies: 'finalData', 'findSurvey', and 'getInitialData'. Either include them or remove the dependency array.",["156"],"React Hook useEffect has a missing dependency: 'historyRouter'. Either include it or remove the dependency array.",["157"],"React Hook useEffect has a missing dependency: 'getAllSurveys'. Either include it or remove the dependency array.",["158"],["159"],"React Hook useEffect has a missing dependency: 'getSavedSurveys'. Either include it or remove the dependency array.",["160"],"'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"163","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [getInitialData, getRegion]",{"range":"174","text":"175"},"Update the dependencies array to be: [history]",{"range":"176","text":"177"},"Update the dependencies array to be: [finalData, findSurvey, getInitialData]",{"range":"178","text":"179"},"Update the dependencies array to be: [finalData, historyRouter]",{"range":"180","text":"181"},"Update the dependencies array to be: [getAllSurveys]",{"range":"182","text":"183"},{"range":"184","text":"177"},"Update the dependencies array to be: [getSavedSurveys]",{"range":"185","text":"186"},[873,875],"[getInitialData, getRegion]",[279,281],"[history]",[5132,5134],"[finalData, findSurvey, getInitialData]",[5733,5744],"[finalData, historyRouter]",[3289,3291],"[getAllSurveys]",[452,454],[1074,1076],"[getSavedSurveys]"]